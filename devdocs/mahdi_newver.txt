
		-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
		|  Mahdi Programming Language   |
		-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-

-----------------------------
Influence by:
C,PHP,MPL,PYTHON,JAVA
-----------------------------
step 1   :import all files [OK]
step 2   :detect all functions , packages , instructions [OK]
step 3   :resolve all inherit packages [..]
step 3.1 :if debug mode is on, then go to mdebug and wait!
step 3.2 :if build mode is on, then go to mbuild and compile execute file!
step 4   :start from first instruction of bootup function and run codes line by line
-----------------------------
/*
**basic data types**
number,string,boolean
**sub data types**
num:i(8dig),f(10dig),h
bool:b
str:s,u
pointer:p
**Keywords**
func,pack,override,static,true,false,if,elif,else,choose,and,or,not,next,break,loop,number,string,boolean,def,manage,return,self,this,import,config=>26
*************************************
-----------------core module packages
exception,console,string,math,os,bit,app,file
-----------------http module packages
net
-----------------db module packages
sqlite3,csv
-----------------builtin functions
len(var),typeof(var),exec(str),errhand(num,str,str),del(var),nil(var)/*check is empty*/,str(var)/*convert to string*/,num(var)/*convert to number*/,inum(str)
list methods: push(var),pop()/*remove and get last item*/,top()/*get last item*/,popfirst(),topfirst(),pushfirst(var),fill(number,var)/*fill n rooms with var value*/
map methods: get(key),set(key,var)
-----------------predefined functions
- these functions just called by mahdi, not programmer!
_bootup_(string),_init_(),_plus_(package):package,_len_():num,_str_():str,_equal_(package):bool,_index_(number):package/*pack1[0]*/,_empty_():bool/*nil(pack1)*/,_del_():void/*del(pack1)*/
-----------------Extensions
- mah    : mahdi source files
- mahlib : mahdi lib bytecode files
-----------------Operators
+,-,*,/,|(int divide),%(int),^
==,<=,>=,!=,<,>
+=,++,--,-=,*=,/=,%=,^=,:=,|=
..,::,->
*************************************
-----------------modules and libraries
- modules in c with .dll or .so
- libraries in mahdi with .mahlib
- in modules and libraries just packages not global functions
- lib: (package1.mah,package2.mah,...).mahlib

-----------------const var
- if in define var, first char is capital, is const var
def B=true //OR def B:boolean=true
def Fg=''
-----------------config keyword
- config just in outof any package
config DebugMode=true
config ErrorsState='fetal'
ErrorsState(string),WarningsState(string),ExportLogFile(string),MaxHugeDivideSteps(number),MaxHugeDecimalNumbers(number),AppVersion(string),AppName(string),AppLicense(string),AppCreator(string),AppIcon(string),DebugMode(boolean),ExportBuildFile(string),BuildMode(boolean)
----------------- import keyword
- import from file not have any option like import specific package or global function
import [type]:[dll]|[lib]|[file]:[packs],[@funcs]
import mod:core:exception //import execption package from core module
import mod:core:math,os //OR *
import lib:..libs.mylib:* // import from "/home/am/Desktop/proj/libs/mylib.mahlib" all packages , .(first) is project root(/home/am/Desktop/proj) and . is /(slash)
import lib:stdlib:* // import from stdlib of mahdi lang
import lib:..other:pkg1,pkg2,@fun1 //import from "/home/am/Desktop/proj/other.mahlib" pkg1,pkg2 packages and fun1 global function
import file:..src.all //import from "/home/am/Desktop/proj/src/all.mah" all packages and all global functions
-----------------package methods
pack pk1(){
	@public
	static func h2(){}
	@private
	override static func h1(){}
}
OR
pack pk1(){
	static func h2(){}
	@private
	override static func h1(){}
}
-----------------switch structure
- if not set true item(default case), occurs an warning and if not all conditions, occurs an error!
- can not define another choose into the other
choose(var){
   -> 43:
   //do something
   -> 34 or 12:
   //do something
   -> true:
   //do something
}
-----------------declare variables and arrays
- variable attributes: static (func), private,public (pack)
- static variables just declared in functions
- all variables must get default value when declared
- you can set default value for all rooms of array
- for define every variable, must determine its data type (as clean or by value)
static def g:number,k=0,''
def list=[4,6,9,-3] OR def list:number=[] //=>def g=list[2] //g=9
def j,d:string,b= 56.6,['t','o'],true
def x,e,u=45
def n,m,b:boolean=0,6,true
def er:number={'q1':23,'q2':67} //num j=e.get('q1')
def dd=[[2.6,6],[5,-7.1]] OR def dd:number=[[2.6,6],[5,-7.1]]
def ddd=[{'q1':3,'q2':4},{'f':'fg','g':'gf'}] //=>def h:string=ddd[1].get('f')
def dd=[2,89,6] //ERR=>dd.push([2,89]) => dd.push(2)
def gh:string=[]; gh.fill(45,'hi');
def kl=[];kl.fill(4,'ali');//def kl=['ali','ali','ali','ali']
-----------------create instance of a new package
def t1=type1(45)
t1.add(34)
-----------------set vars in string
def t="Amin";def j=56;
def s="Hello %t% : %j%\%";
-----------------loop
loop([section1];[section2];[section3])
[section1] : just run in first time (for define vars)
[section2] : run every time and decide that loop be continue (for check vars) [is required]
[section3] : run every time except first time (for change vars)
sample:
- loop(def i=0,def u='';i<10,u!="Hello";i++)
- loop(def u:string='',def b='',def i=0;u:uu;i+=5,u[0]+=" ") //def uu=[["x","v"],["h","i"]] browse uu array => u=["x ","v"]
- loop(;i<5) or loop(;i<5;)
- loop(def h=get1(),def k=0;h<get2(k);k++,h++)
- loop(def u='',def b='',def i=0;u!="Hi")
def u:number=[];u.fill(34,5);
loop(def j=0;j:u) //foreach an array
-----------------break,next
- break instruction can give a number that determine how many break from multiple loops
- next instruction can not gives any numbers!
loop(..){
	loop(..){
		a=b;
		break(2); //break(*) : break all loops
	}
	next;
}
-----------------manage
- manage can get not any parameters like : manage()
- manage get a var type exception
- in manage, when get exception, then stop and out of manage block!
- without manage block, when get exception, ignore that line and continue from next line :)

manage(){ //=>just interuppt when occurs an error
//do something
}
def exp=exception();
manage(exp){ //=>interuppt when occurs an error and put error and warnings in exception var
//do something
}
if(not nil(exp)){
//do something
}
-----------------range
- for lists and strings
def j=[3,8,6.5,-9]
def v:number=j[1..3]; //v=[8,6.5]
def s=["amin","ali"]
def ss=s[0][1..4];//ss="min";
-----------------swap with :=
- swap is just for same type variables and not lists!
def n=45,def q=[5,9.6];
n:=q[0] //n=5,q[0]=45
-----------------function header
- function header can a parameter with default value
- default value of a paqrameter can be a value expression(number|string|boolean) or a list or a map as simplest! like 4+5,true,'he'+'llo',[5,8.5-4],{'q1':67,'q2':9*4}
- function parameter must have data type or default value
func sam(d:string,g=34/*OR g:number*/)
func sam1(j=3,jj:string)
----------------- call function
- all functions that defined out of all packages, are static and public and not give any attribute(private,static)
- for call outof functions using self keyword
- call function can using parameter name!
func fg(){}
func _bootup_(){
self.fg()
}
sam1(jj="er",j=7.656) OR sam1(34,"hello")
//call static function
pkg.main(); OR mypkg1=pkg();mypkg1.main();
//get public const package vars
def f=pkg::ERRORSTATE; //f=4
//call package function
mypkg1=pkg();mypkg1.sub() OR pkg().sub() 
def z=pkg().plus(3)
def g,s=sam() //=>ERR:on defined variable
g,s=sam() //=>ERR:if sam() return not two values
def j=0;j=f("g",6.8)[1]  //=>j get 2nd returned value
-----------------predefined package functions 
def _plus_(pack):any => def g=pk1+pk2
def _minus_(pack):any => def g=pk1-pk2
def _empty_():boolean => if(nil(pk1))
def _index(number):any=> def h=pk1[0] //h='hello'

-----------------var alloc
a=3
b+=4
a:=b
a,b=sam()
b,c,d=sam() //ERR
v,n=e,u // OR v=e;n=u;
-----------------operands on boolean
and : true and false => false
or  : true or false => true
not : not true => false
--samples
true and (not false or (true and false)) => true
=> (0) and : true , (1)    => (0)=true
=> (1) or  : true , (2)    => (1)=true
=> (2) and : true , false  => (2)=false
false and not true or not false => true
=> (0) or  : (1) , true  => (0)=true
=> (1) and : false , false => (1)=false
true and not (false and true) => true
=> (0) and : true , (1)(n)  => (0)=true
=> (1) and : false, true    => (1)=true
-----------------operands on string
+ : "He"+"llo" => 'Hello'
- : 'HelHello'-'Hel' => 'Hello' //'Hel'-'HelHello' => 'Hel'
++,-- : last spaces (on string variable)
--samples
("H"+"H"+"i")-"HH"=>"HHi"-"HH"=>"i"
=> (0) - : (1) , "HH" => (0)="i"
=> (1) + : (2) , "i"  => (1)="HHi"
=> (2) + : "H" , "H"  => (2)="HH"

-----------------if in if
if(true)
  if(ty>7 and rt=='56'){
    console.print('gggg')
    loop(;true)
       break
  }else
    console.print('ffff')
-----------------++,--
- for strings and numbers
str:("Hello")
	++:"Hello " (add a space end of string)
	--:"Hell" (remove last char of string)
num:(45.5)
	++:46.5 (plus num by 1)
	--:44.5 (subtraction num by 1)
def q=1
def e1=(45*q++) //=>e1=45,q=2
def e2=(45*++q) //=>e2=90,q=2
-----------------control characters
\n : new line
\t : insert tab
\" : print "
\' : print '
\\ : print \
\% : print %
\b : backspace
\a : play alert sound
-----------------_bootup_ function
- bootup function can just run for once, not recursive
- bootup function must be out of any packages
- bootup can give app arguments
- just one bootup function exist in all program
func _bootup_(){}
func _bootup_(argvs:string/*OR argvs:string=[]*/){}
-----------------_init_ function
- package constructor and must be just public!
pack main(){
@public_method
func _init_(s:string,y:string){}
}
-----------------package attributes
pack pk1(){
def GG=(45*2)+5
override def aa=11 //in child package, can redefined like 'def aa=12' type can not changed
static def v=3
def q:string
def z1,z2,z3=3,true and true,"hello"
}
-----------------inherit packages
- if a method override, then in next package that inherit it, can define a method with same name else error! 
- example of override: override func _str_(){}
pack pkg1(){
   @public
   override func ps1(){}
   func ps3(k:number){
      this.ps2(56)
   }
   @private
   func ps2(j:number){}
   
}
pack pkg2(pkg1){
   func ps1(jj=56){} //not override on ps1 of pkg1
   (static|override) func ps3(kk:number){} //ERR:exist this on super and not override
   func ps2(j:number){
      this.ps2(4)
      this.ps1()
      this.ps3(78)
   }
}
